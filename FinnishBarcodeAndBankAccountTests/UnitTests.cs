using System;
using System.Globalization;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace BarcodeTests
{
    [TestClass]
    public class UnitTests
    {

        [TestMethod][TestCategory("Finnish bank account")]
        public void Valid_IBAN_from_BBAN_1()
        {
            string bban = " 159030 - 776 ";
            var account = FinnishBankAccountNumber.FromBBAN(bban);

            Assert.AreEqual("FI3715903000000776", account.IBAN);
            Assert.AreEqual("15903000000776", account.MachineBBAN);
            Assert.AreEqual("FI37 1590 3000 0007 76", account.IBANForPrint);

        }
        [TestMethod]
        [TestCategory("Finnish bank account")]
        public void Valid_IBAN_from_BBAN_2()
        {
            string bban = "200118-132956";
            var account = FinnishBankAccountNumber.FromBBAN(bban);

            Assert.AreEqual("FI8420011800132956", account.IBAN);
            Assert.AreEqual("20011800132956", account.MachineBBAN);
            Assert.AreEqual("NDEAFIHH", account.Bank.BIC);

        }
        [TestMethod]
        [TestCategory("Finnish bank account")]
        public void Valid_IBAN_from_BBAN_3()
        {
            string bban = "563000-20065345";
            var account = FinnishBankAccountNumber.FromBBAN(bban);

            Assert.AreEqual("FI3756300020065345", account.IBAN);
            Assert.AreEqual("56300020065345", account.MachineBBAN);
            Assert.AreEqual("OKOYFIHH", account.Bank.BIC);

        }

        [TestMethod]
        [TestCategory("Bank account")]
        public void Validate_IBAN_1()
        {
            Assert.IsTrue(BankAccountNumber.IsValidIBAN(" FI 4250 0015 1000 0023 "));
        }

        [TestMethod]
        [TestCategory("Bank account")]
        public void Validate_IBAN_2()
        {
            string[] arrIBAN = "AL28036081284965699392495481;AL67994543665423660246851676;AL48210643483121401371655840;AD6083556249393571995121;AD2479463712342942509970;AD3373062005955220047513;AT761677890810350110;AT821194353076530956;AT156336268064392154;AZ02FYWF49080481567385934895;AZ30YLEY25222261185119978313;AZ55VQRQ39942017241139287172;BH05TCDJ32822647954498;BH42HVHR88263502758775;BH43VTNS25602865547445;BE69534287097597;BE81419873621879;BE11674832278307;BA605781060042774884;BA563290704186155631;BA357602361030671076;BR3407189603518195073747455W6;BR6989574728250972155078990B4;BR8889756492000367720867272Q5;BG23IZUP50692891847955;BG74SQJL92067275429727;BG57ATHS04320235404916;CR3671894132949108955;CR4375956859816342442;CR8827036666343746879;HR3726185836887165147;HR7353044077708280222;HR6047181732080121801;CY45649207136212391953537382;CY58082808610860677082960743;CY76925470599648391650961430;CZ5836344645666399973424;CZ0603357598387917254531;CZ7727425880174760306839;DK7972713986299846;DK0479313758083243;DK3520976418595394;DO90762322818179055456474560;DO05967357358419738301855703;DO15394405535369185316524321;EE719032714380475700;EE839220193084468801;EE336068270333578578;FO1620352946306112;FO9086167481040771;FO9365287674259844;FI1944088535338350;FI4534668600336986;FI6747151688969614;FR4976849258682640132149648;FR5492680892155607473608254;FR1259159545574476662841295;GE46SR6002819599209478;GE29VN5807237645046292;GE03RQ5233986044241476;DE81334880310365569956;DE96433552842948097722;DE03776160643343135586;GI88EUAD774984140973366;GI37OUOC906514932232328;GI14TOWS959912126546575;GR8256253721819401654997489;GR9473867364040821703679696;GR9410789058830189018932248;GL0364819393462667;GL9743696178637009;GL3931273379324404;GT39634904345531449971372759;GT65161799494131560665304523;GT19768124568734743466319443;HU70003606989017024779970648;HU31434283088398946473062106;HU45833595905959254499899165;IS535462483725070955471423;IS282620002008714729915698;IS089698629253799818667449;IE24YPPI71424280082002;IE70MMHN91541534712949;IE92TZCS84113224262685;IL177753287331919282829;IL532311727476634334206;IL031963315019921066524;IT84J6713328783648886537149;IT42M9913896599663467062009;IT95Z1590368184275324609482;KZ528603295103298085;KZ838913572100583866;KZ203079022607305143;KW63RPGV9517530982536849531433;KW61HEON3506663357213886052833;KW82NBMY1160580637115439736730;LV54HUNL8397905829544;LV71JGQD4977325946529;LV41BTHV1456190723430;LB71858883478618770510874587;LB57462279485397652886725533;LB25035299824004830193966375;LI5630538360431157461;LI0333731083607432074;LI5449638143923178716;LT846446040679583521;LT603193401235436499;LT441297432133810513;LU104337944344019434;LU213407462492579909;LU163873120597208338;MK63845846706895213;MK26953019682991607;MK63325514612286691;MT87UGEL73290583575743405098895;MT56SJBM21507624398198587852370;MT39ZIJQ24255978165466055243572;MR2706962691166506586548630;MR8824544194269602271583380;MR5707656877861140782511563;MU27IXVN8437679899898355534CEI;MU14ALJE1946386369278680035GFZ;MU09IPXC3023918679436931564LDS;MD9123428922176491079738;MD7240225348472370055188;MD7541704369082921108714;MC2356621955279275378298838;MC0876262499691069455668176;MC1040023077986048426758385;ME62282356754683773033;ME86370247439312722553;ME64846781248073020416;NL84XXYW8684401530;NL36KRPK9394447563;NL83XHHP7814310873;NO0791792674709;NO7007662057880;NO1737098158693;PK70DTCX4960876201874875;PK34DFXO0161631961983781;PK46WHOG2316252316859747;PL31102491384448452231973788;PL26166358153597977510583265;PL31783572739867555230283743;PS80VUQO337391930119457079098;PS98VBPZ012802030319992815695;PS26YRZX975265810946770780081;PT90245411271948346449482;PT17534411800366240780175;PT13186866583139421356188;QA12IVEQ207119045458092964619;QA91JPHR952388446714768886372;QA11HHZG724272711897246609539;RO51VXKI9345542006462489;RO73EMBG0172192470607018;RO58BLHP6548344905123870;SM08O0875264503753978064190;SM90F4730559716425207911482;SM05T1107603465380594619452;SA3253935074127933430017;SA5920709630955044236186;SA8577578518773597966038;RS36422570309962860211;RS70560903303870778317;RS28978206566193827633;SK9704030768196640274023;SK5368994136837939249685;SK9707642846286650175160;SI34392898463069102;SI06251153493108936;SI65536116049521254;ES5751572195589823273776;ES4874829830726467220532;ES2278319623514682708337;SE5715172716969018200476;SE1021361445408717119995;SE4949530073611177266715;CH1600239653737263790;CH5267796406815733657;CH9716011514982583366;TN8107706234905189496109;TN7260361945404976072912;TN9181250650606973192008;TR192288403204810846647027;TR394068227691968786165134;TR444755828628008532905107;AE207038341402558511086;AE747403880467219547984;AE495639273412393254241;GB83GDGM53666725607041;GB30LWXL72465791611077;GB95JNER15916681578823;VG89POWO3058649958229439;VG26FLVA7187112615941006;VG83QBGY6918625018009569"
                .Split(';');

            Assert.AreEqual(195, arrIBAN.Length);

            foreach (var iban in arrIBAN)
            {
                Assert.IsTrue(BankAccountNumber.IsValidIBAN(iban));
            }
        }

        [TestMethod]
        [TestCategory("Bank info")]
        public void BIC_1()
        {
            var bi = new BankInfo("NDEAFIHH", "Nordea");

            Assert.AreEqual("FI", bi.Country);
            Assert.IsTrue(bi.IsPrimaryOffice);
            Assert.AreEqual("XXX", bi.BranchCode);
        }

        [TestMethod]
        [TestCategory("Bank info")]
        public void BIC_2()
        {
            var bi = new BankInfo("DEUTDEFF500", "Deutsche Bank");

            Assert.AreEqual("DE", bi.Country);
            Assert.AreEqual("500", bi.BranchCode);
            Assert.IsFalse(bi.IsPrimaryOffice);
        }


        [TestMethod]
        [TestCategory("Barcode")]
        public void Barcode_1()
        {
            var bc = new FinnishInvoiceBarcode("486500001200088250005333500000000031418730683329150505");

            Assert.AreEqual("FI86 5000 0120 0088 25", bc.Account.IBANForPrint);
            Assert.AreEqual("OKOYFIHH", bc.Account.Bank.BIC);
            Assert.AreEqual(new DateTime(2015, 5, 5).ToShortDateString(), bc.Date.Value.ToShortDateString());
            Assert.AreEqual("00000031418730683329", bc.RefNumString);
            Assert.AreEqual("533.35", bc.Sum.ToString("f2", CultureInfo.InvariantCulture));
            Assert.AreEqual("3141 87306 83329", bc.ReferenceNumber.RefNumberForPrint);
        }

        [TestMethod]
        [TestCategory("Finnish ref. number")]
        public void FinnishRefNumber()
        {
            Assert.IsTrue(FinnishReferenceNumber.IsValidReferenceNumber("5555"));
            Assert.IsTrue(FinnishReferenceNumber.IsValidReferenceNumber("1234561"));
            Assert.IsFalse(FinnishReferenceNumber.IsValidReferenceNumber("12345612"));
            Assert.AreEqual("123 45612", new FinnishReferenceNumber("12345612").RefNumberForPrint);
            Assert.IsTrue(FinnishReferenceNumber.IsValidReferenceNumber("12345614"));
            Assert.IsTrue(FinnishReferenceNumber.IsValidReferenceNumber("6174354"));
        }
    }
}
